datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  usersettings  usersettings[]
  routine       routine[]
}

model usersettings {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String   @unique
  //theme         Int
  activeroutine String?  @db.Uuid
  routine       routine? @relation(fields: [activeroutine], references: [routine_id], onDelete: SetNull)
  User          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model bodypart {
  bodypart_id String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String     @db.VarChar(100)
  muscle      muscle[]
  exercise    exercise[]
}

model equipment {
  equipment_id String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  description  String
  exercise     exercise[]
}

model muscle {
  muscle_id      String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @db.VarChar(100)
  description    String
  bodypart_id    String           @db.Uuid
  bodypart       bodypart         @relation(fields: [bodypart_id], references: [bodypart_id], onDelete: Cascade, onUpdate: NoAction)
  muscleexercise muscleexercise[]
}

model muscleexercise {
  muscleexercise_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  muscle_id         String   @db.Uuid
  muscle            muscle   @relation(fields: [muscle_id], references: [muscle_id], onDelete: Cascade, onUpdate: NoAction)
  exercise_id       String   @db.Uuid
  exercise          exercise @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade, onUpdate: NoAction)
}

model exercise {
  exercise_id         String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String?               @db.VarChar(100)
  equipment_id        String                @db.Uuid
  equipment           equipment             @relation(fields: [equipment_id], references: [equipment_id])
  gif_url             String?               @db.VarChar(255)
  instructions        String
  bodypart_id         String?               @db.Uuid
  bodypart            bodypart?             @relation(fields: [bodypart_id], references: [bodypart_id])
  trainingdayexercise trainingdayexercise[]
  muscleexercise      muscleexercise[]
}

model routine {
  routine_id     String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String         @db.VarChar(100)
  description    String?
  user_id        String
  user           User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  routinetype_id String         @db.Uuid
  routinetype    routinetype    @relation(fields: [routinetype_id], references: [routinetype_id], onDelete: NoAction, onUpdate: NoAction)
  weeks          week[]
  usersettings   usersettings[]
  order_         Int            @unique @default(autoincrement())
}

model routinetype {
  routinetype_id String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String    @db.VarChar(255)
  description    String?
  icon_url       String
  icon_alt_text  String
  routines       routine[]
}

model trainingdayexercise {
  trainingdayexercise_id String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sets                   Int?
  reps                   Int?
  weight                 Int?
  rir                    Int?
  exercise_id            String?     @db.Uuid
  exercise               exercise?   @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade, onUpdate: NoAction)
  trainingday_id         String      @db.Uuid
  trainingday            trainingday @relation(fields: [trainingday_id], references: [trainingday_id], onDelete: Cascade, onUpdate: NoAction)
  order_                 Int         @unique @default(autoincrement())
}

model trainingday {
  trainingday_id      String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String                @db.VarChar(100)
  description         String?
  week_id             String?               @db.Uuid
  week                week?                 @relation(fields: [week_id], references: [week_id], onDelete: Cascade, onUpdate: NoAction)
  trainingdayexercise trainingdayexercise[]
  order_              Int                   @unique @default(autoincrement())
}

model week {
  week_id      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @db.VarChar(100)
  description  String?
  routine_id   String        @db.Uuid
  routine      routine       @relation(fields: [routine_id], references: [routine_id], onDelete: Cascade, onUpdate: NoAction)
  trainingdays trainingday[]
  order_       Int           @unique @default(autoincrement())
}
