datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  usersettings  usersettings[]
  routine       routine[]
}

model usersettings {
  id            Int      @id @default(autoincrement())
  user_id       String   @unique
  //theme         Int
  activeroutine Int?
  routine       routine? @relation(fields: [activeroutine], references: [routine_id], onDelete: SetNull)
  User          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model exercise {
  exercise_id         Int                   @id @default(autoincrement())
  name                String?               @db.VarChar(100)
  body_part           String?               @db.VarChar(100)
  equipment           String?               @db.VarChar(100)
  gif_url             String?               @db.VarChar(255)
  target              String?               @db.VarChar(100)
  secondary_muscles   String[]
  instructions        String[]
  trainingdayexercise trainingdayexercise[]
}

model routine {
  routine_id     Int            @id @default(autoincrement())
  name           String         @db.VarChar(100)
  description    String?
  user_id        String
  user           User           @relation(fields: [user_id], references: [id])
  routinetype_id Int
  routinetype    routinetype    @relation(fields: [routinetype_id], references: [routinetype_id], onDelete: NoAction, onUpdate: NoAction)
  weeks          week[]
  usersettings   usersettings[]
}

model routinetype {
  routinetype_id Int       @id @default(autoincrement())
  name           String    @db.VarChar(255)
  description    String?
  icon_url       String
  icon_alt_text  String
  routines       routine[]
}

model trainingdayexercise {
  trainingdayexercise_id Int         @id @default(autoincrement())
  name                   String      @db.VarChar(100)
  sets                   Int?
  reps                   Int?
  weight                 Int?
  rir                    Int?
  exercise_id            Int
  exercise               exercise    @relation(fields: [exercise_id], references: [exercise_id], onDelete: Cascade, onUpdate: NoAction)
  trainingday_id         Int
  trainingday            trainingday @relation(fields: [trainingday_id], references: [trainingday_id], onDelete: Cascade, onUpdate: NoAction)
}

model trainingday {
  trainingday_id      Int                   @id @default(autoincrement())
  name                String                @db.VarChar(100)
  description         String?
  week_id             Int?
  week                week?                 @relation(fields: [week_id], references: [week_id], onDelete: Cascade, onUpdate: NoAction)
  trainingdayexercise trainingdayexercise[]
}

model week {
  week_id      Int           @id @default(autoincrement())
  name         String        @db.VarChar(100)
  description  String?
  routine_id   Int
  routine      routine       @relation(fields: [routine_id], references: [routine_id], onDelete: Cascade, onUpdate: NoAction)
  trainingdays trainingday[]
}
